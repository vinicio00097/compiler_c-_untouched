/**
 * Syntax Specification
 *
 * Contributors:
 *      Jeanderson Barros Candido - http://jeandersonbc.github.io
 *      Thiago Ferreira Patricio - http://github.com/tferreirap
 */
package compiler.generated;
import java_cup.runtime.*;
import util.*;
import core.*;
import java.util.ArrayList;
import java.util.List;

init with {: SemanticAnalysis.parser = this;              :};

parser code {:
    
    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   

        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};


/**
 * Terminals without associated type
 */
terminal SEMICOLON, LBRK, RBRK, USING, ASSIGNMENT, LSQRBRK, RSQRBRK, ORASSIGN, GTE, EXTERN, ARROW, CONST, VOLATILE;
terminal SINGLEAND, DOUBLEAND, NOEXCEPT, QUESTION, ANDASSIGN, LT, GT, STATIC_ASSERT, MULTASSIGN, DIVASSIGN, MODASSIGN;
terminal PLUSASSIGN, MINUSASSIGN, RSHIFTASSIGN, LSHIFTASSIGN, LTE, DOT, TYPENAME, LPAR, RPAR, ALIGNAS, DOTS, CLASS, STRUCT;
terminal UNION, FINAL, EXPLICIT, COMMA, COLON, NEQOP, LSHIFT, CONSTEXPR, XORASSIGN, STAR, SEPPTR, OROP, SOROP, XOROP, EQOP;
terminal RSHIFT, DIVOP, MODOP, DOTSTAR, ARROWSTAR, FRIEND, MINUSOP, PLUSOP, ALIGNOF, AUTOINCRM, AUTODECRM, SIZEOF, LOGNEGATION;
terminal BINNEG, TYPEID, TYPEDEF, THIS, NULLPTR, PRIVATE, PUBLIC;
terminal PROTECTED, DECLTYPE, DEFAULT, INTEGER, STRING_LITERAL, STRING;

terminal AUTO, BREAK, CASE, CHAR, CONTINUE, DO, DOUBLE, ELSE, FLOAT, FOR, GOTO, IF, INT, BOOL,
LONG, REGISTER, RETURN, SHORT, SIGNED, STATIC, SWITCH, UNSIGNED, VOID, WHILE, OPERATOR, NEW ;
    
/**
 * Terminals with types associated  terminal java.lang.String IDENTIFIER;
 */

terminal IDENTIFIER;
terminal TRUE, FALSE;

/**
 * Non terminal symbols
 */
non terminal typeIdListOpt, typeIdList, conditionalExpr, primaryExpr, attributeOpt;
non terminal initDeclaratorListOpt, balancedToken, assignmentOperator, functionDef, functionBody, declSpecSeqOpt, declarator;
non terminal inclusiveOrExpr, exclusiveOrExpr, andExpr, equalityExpr, relationalExpr, shiftExpr, enumList;
non terminal classVirtSpecSeqOpt, classVirtSpecSeq, refQualifierOpt, deleteExpr, ptrDeclarator;
non terminal userDefinedLiteral, floatingLiteral, lambdaIntroducer, lambdaDeclaratorOpt, compoundStatement, declSpec;
non terminal trailingReturnType, trailingTypeSpecSeq, cvQualifierSeqOpt, cvQualifier, nestedNameSpec, pointerLiteral;
non terminal additiveExpr, unqualifiedId, typeSpecSeq, abstractDeclaratorOpt, abstractDeclarator, typeSpec, constExpr, unaryExpr, booleanLiteral;
non terminal simpleTypeSpec, elaboratedTypeSpec, typenameSpec, ptrAbstractDeclaratorOpt, castExpr, characterLiteral;
non terminal attributeToken, attributeArgClsOpt, attributeArgCls, attributeScopedToken, balancedTokenSeq, attribute;
non terminal memberSpecification, classKey, classHead2, classHeadName, enumHead, literal, usingDecl;
non terminal bracedInitList, commaOpt, initializeList, assignmentExprOpt, postfixExpr, unaryOp, idExpr;
non terminal typeSpecSeq2, attributeSpecSeqOpt, attributeSpecSeq, paramDeclarationCls, enumListOpt, stringLiteral;
non terminal translationUnit, blockDeclaration, aliasDeclaration, multExpr, integerLiteral;
non terminal logicalOrExpr, expr, assignmentExpr, initializeCls, throwExpr, logicalAndExpr, newExpr, qualifiedId;
non terminal classOrDeclType, className, declTypeSpec, accessSpec, accessSpecOpt;
non terminal attributeSpec, attributeList, alignmentSpec, dotsOpt, classHead, cvQualifierSeq, exprListOpt, token;
non terminal trailingTypeSpec, classSpec, enumSpec, memberSpecificationOpt, bracedInitListOpt;
non terminal noPtrDeclarator, linkageSpec, memInitializerId, noPtrAbstractDeclarator, ptrOperator, parametersAndQualifiers;
non terminal attributeDecl, simpleDecl, classVirtSpec, ptrAbstractDeclarator, refQualifier, pmExpr, lambdaExpr;

non terminal declarationSeqOpt, declarationSeq, declaration, emptyDeclaration, typeId, pseudoDestructorName;
non terminal identifierOpt, declSpecSeq, memInitializerList, memInitializer, declaratorId, storageClassSpec;
non terminal functionSpec, sepptrOpt, typeName, nestedNameSpecOpt, enumName;
non terminal typedefName, ctorInitializerOpt, paramDeclarationListOpt, paramDeclarationList, paramDeclaration;
non terminal statementSeqOpt, statementSeq, statement, exprStatement, selectionStatement, iterationStatement;
non terminal jumpStatement, tryBlock, labeledStatement, declStatement, exprOpt, overloadableOperator, operatorFunctionId;
non terminal conversionFunctionId, conversionTypeId, conversionDeclaratorOpt, conversionDeclarator, condition, conditionOpt;
non terminal initDeclaratorList, initDeclarator, initializerOpt, initializer, braceOrEqualInitializer, forInitStatement;
non terminal forStatement, forRangeInitializer, forRangeDeclaration, ruleAux;

non terminal decimal_Literal, integerSuffix;


/**
 * Precedences
 */
precedence nonassoc DOTS, LPAR, LSQRBRK;

precedence left PLUSOP, MINUSOP; 
precedence left DIVOP; 

/**
 * The Grammar Specification
 *
 * See "README.md" on "http://github.com/jeandersonbc/compilers.cpp"
 * for further information.
 */
start with translationUnit;

translationUnit ::= declarationSeqOpt {: Logger.print("120 translationUnit"); :};

declarationSeqOpt ::= declarationSeq | ;

declarationSeq ::= declaration
    |   declarationSeq declaration
    ;

/**
 * Declaration Types
 */

declaration ::= blockDeclaration:b  {: Logger.print("132 "  + b); :}
    |   functionDef:f               {: Logger.print("133 "  + f); :}
    |   linkageSpec
    |   emptyDeclaration
    |   attributeDecl
    ;


/**
 * Attribute Declaration
 */
attributeDecl ::= attributeSpecSeq SEMICOLON;

/**
 * Linkage Specification
 */
linkageSpec ::= EXTERN stringLiteral LBRK declSpecSeqOpt RBRK
    |   EXTERN stringLiteral declaration
    ;


identifierOpt ::= IDENTIFIER | ;

/**
 * Function Definition
 */

 functionDef ::= declSpec:d declarator:de {: Logger.print("pre-159 declSpec: " + d + " declarator: " + de); ((Function) de).setReturnType((Type) d); SemanticAnalysis.getInstance().addFunctionAndNewScope((Function) de); :}  functionBody:fb {: Logger.print("159 " + d + " " + fb);  SemanticAnalysis.getInstance().exitCurrentScope(); :};


 


declSpecSeqOpt ::= declSpecSeq | ;

declSpecSeq ::= declSpec
    |   declSpec declSpecSeq
    ;


declSpec ::= storageClassSpec:s     {: Logger.print("168 storageClassSpec" + s); RESULT = s; :} 
    |   typeSpec:t                  {: Logger.print("169 typeSpec" + t); RESULT = t; :} 
    |   functionSpec:f              {: Logger.print("170 functionSpec" + f); RESULT = f; :}
    |   FRIEND                      {: RESULT = new Node("friend", "primario");  Logger.print("friend"); :}
    |   TYPEDEF                     {: RESULT = new Node("typedef", "primario");  Logger.print("typedef"); :}
    |   CONSTEXPR                   {: RESULT = new Node("constexpr", "primario");  Logger.print("constexpr"); :}
    ;

storageClassSpec ::= AUTO           {: RESULT = new Node("auto", "primario");  Logger.print("auto");:}
    | REGISTER                      {: RESULT = new Node("register", "primario");  Logger.print("register");:}
    | STATIC                        {: RESULT = new Node("static", "primario");  Logger.print("static");:}
    | EXTERN                        {: RESULT = new Node("extern", "primario");  Logger.print("extern");:}
    ;

functionSpec ::= EXPLICIT;

typeSpec ::= trailingTypeSpec:t     {: Logger.print("184 trailingTypeSpec " + t); RESULT = t; :} 
    |   classSpec:c                 {: Logger.print("185 classSpec " + c); RESULT = c; :} 
    |   enumSpec
    ;

typeName ::= className
    |   enumName
    |   typedefName
    ;

enumName ::= IDENTIFIER;

typedefName ::= IDENTIFIER;         

trailingTypeSpec ::= simpleTypeSpec:s {: Logger.print("198 simpleTypeSpec " + s); RESULT = s; :} 
    |   elaboratedTypeSpec
    |   typenameSpec
    |   cvQualifier
    ;

sepptrOpt ::= SEPPTR | ;

nestedNameSpecOpt ::= nestedNameSpec | ;

nestedNameSpec ::= typeName COLON COLON
    | declTypeSpec COLON COLON
    | nestedNameSpec IDENTIFIER COLON COLON
    ;

simpleTypeSpec ::= sepptrOpt nestedNameSpecOpt typeName
    |   CHAR                {: RESULT = new Type("char");      Logger.print("char");:}
    |   STRING              {: RESULT = new Type("string");    Logger.print("string");:}
    |   BOOL                {: RESULT = new Type("bool");      Logger.print("bool");:}
    |   SHORT               {: RESULT = new Type("short");     Logger.print("short");:}
    |   INT                 {: RESULT = new Type("int");       Logger.print("int");:}
    |   LONG                {: RESULT = new Type("long");      Logger.print("long");:}
    |   SIGNED              {: RESULT = new Type("signed");    Logger.print("signed");:}
    |   UNSIGNED            {: RESULT = new Type("unsigned");  Logger.print("unsigned");:}
    |   FLOAT               {: RESULT = new Type("float");     Logger.print("float");:}
    |   DOUBLE              {: RESULT = new Type("double");    Logger.print("double");:}
    |   VOID                {: RESULT = new Type("void");      Logger.print("void");:}
    |   AUTO                {: RESULT = new Type("auto");      Logger.print("auto");:}
    |   declTypeSpec
    ;

functionBody ::= COLON memInitializerList compoundStatement
    |   compoundStatement:c          {: Logger.print("229 funcBody -> compoundStatement " + c ); RESULT = c; :}
    ;

memInitializerList ::= memInitializer dotsOpt
    |   memInitializer COMMA memInitializerList dotsOpt
    ;

memInitializer ::= memInitializerId LPAR exprListOpt RPAR
    |   memInitializerId bracedInitList
    ;

memInitializerId ::= classOrDeclType
    | IDENTIFIER
    ;

declarator ::= ptrDeclarator:p              {: Logger.print("244 ptrDeclarator " + p ); RESULT = p; :}
    |   noPtrDeclarator parametersAndQualifiers trailingReturnType
    ;

ptrDeclarator ::= noPtrDeclarator:n         {: Logger.print("248 noPtrDeclarator " + n);  RESULT = n; :}
    |   ptrOperator ptrDeclarator           {: Logger.print("249 ptrDeclarator "); :}
    ;

noPtrDeclarator ::= declaratorId:d                  {: Logger.print("252 declaratorId " + d ); RESULT = d; :}
    |   noPtrDeclarator:n parametersAndQualifiers:p {: Logger.print("253 noptrDeclarator " + n + " paramsQualifiers " + p ); RESULT = new Function(n.toString(), (ArrayList<Parameter>) p);; :} 
    |   noPtrDeclarator LSQRBRK constExpr RSQRBRK attributeSpecSeqOpt
    |   noPtrDeclarator LSQRBRK RSQRBRK attributeSpecSeqOpt
    |   LPAR ptrDeclarator RPAR
    ;

declaratorId ::= idExpr:idE                     {: Logger.print("259 idExpr " + idE ); RESULT = idE; :}
    |   DOTS idExpr
    |   COLON COLON nestedNameSpecOpt className
    |   COLON COLON className
    |   nestedNameSpec className
    |   className
    ;

/**
 * Block Declaration
 */
// PAROU AQUI
blockDeclaration ::= simpleDecl:s               {: Logger.print("276 simpleDecl " + s ); RESULT = s; :}
    |   aliasDeclaration
    ;

/** TO DELETE
* simpleDecl ::= declSpecSeqOpt initDeclaratorListOpt SEMICOLON;
*/

simpleDecl ::= declSpec:d SEMICOLON                  {: Logger.print("*!* 284 " + d); :} 
    |  declSpec:d initDeclaratorList:i SEMICOLON    {: Logger.print("*!* 285 " + d + " " + i); ((Variable) i).setType((Type) d); SemanticAnalysis.getInstance().addVariable((Variable) i); RESULT = i; :} 
    ;


initDeclaratorListOpt ::= initDeclaratorList | ;

initDeclaratorList ::= initDeclarator:i                 {: Logger.print("291 " + i); RESULT = i; :} 
    |   initDeclaratorList:il COMMA initDeclarator:id   {: Logger.print("292 " + il + " " + id); RESULT = il; :} 
    ;   

initDeclarator ::= declarator:d     {: Logger.print("295 " + d); RESULT = new Variable(d.toString(), new Type("UNKNOWN")); :} 
    | declarator:d ASSIGNMENT initializeCls:i {:  Logger.print("226 TODO: CHECK VARIABLE NAME " + d + " " + i); Variable v = new Variable(d.toString(), new Type("UNKNOWN")); Expression ex = (Expression) i; SemanticAnalysis.getInstance().toAssembly(SemanticAnalysis.labels+8+": ST " + d + ", " + (ex.getValue() == null ? "R1" : ex.getValue())); SemanticAnalysis.labels= SemanticAnalysis.labels+8; v.setValue(ex); RESULT = v; :} 
    ;

initializerOpt ::= initializer | ;

initializer ::= braceOrEqualInitializer
    |   LPAR exprListOpt RPAR
    ;

braceOrEqualInitializer ::= ASSIGNMENT initializeCls
    |   bracedInitList
    ;

aliasDeclaration ::= USING IDENTIFIER ASSIGNMENT typeId SEMICOLON;

typeId ::= typeSpecSeq abstractDeclaratorOpt;

abstractDeclaratorOpt ::= abstractDeclarator | ;

abstractDeclarator ::= ptrAbstractDeclarator
    |   noPtrAbstractDeclarator parametersAndQualifiers trailingReturnType
    |   parametersAndQualifiers trailingReturnType
    |   DOTS
    ;

/** parametersAndQualifiers ::= LPAR paramDeclarationCls:p RPAR  {: Logger.print("307 paramsQualifiers " + p ); RESULT = (ArrayList<Parameter>) p; :} ; */

parametersAndQualifiers ::= LPAR RPAR  {: Logger.print("309 paramsQualifiers ()" );      RESULT = new ArrayList<Parameter>(); :}
    | LPAR paramDeclarationCls:pList RPAR  {: Logger.print("310 paramsQualifiers (plist)");  RESULT = pList; :}
    ;

paramDeclarationCls ::= paramDeclarationList:p      {: RESULT = p;  Logger.print("313 parameterDeclaration " + p); :} 
    | paramDeclarationList COMMA DOTS
    ;

paramDeclarationListOpt ::= paramDeclarationList | ;

paramDeclarationList ::= paramDeclaration:pd        {:  RESULT = Util.newList( (Parameter) pd );  Logger.print("319 parameter_declaration " + pd);:} 
    | paramDeclarationList:plist COMMA paramDeclaration:p {: Logger.print("320 " + plist + ": " + p); ((ArrayList<Parameter>) plist).add((Parameter)p); RESULT = plist;:}
    ;

paramDeclaration ::= declSpec:d declarator:de  {: Logger.print("323 " + d + " " + de); Variable v = new Variable(de.toString(), (Type) d); RESULT = v; :}
    |   declSpecSeq declarator ASSIGNMENT initializeCls
    |   declSpecSeq abstractDeclaratorOpt
    |   declSpecSeq abstractDeclaratorOpt ASSIGNMENT initializeCls
    ;

cvQualifierSeqOpt ::= cvQualifierSeq | ;

/**
 * Expressions
 */
expr ::= assignmentExpr:a               {: Logger.print("338 assignmentExpr " + a); RESULT = a; :} 
    |   expr:e COMMA assignmentExpr:a   {: Logger.print("339 expr: " + e + " assignExpr: " + a); :} 
    ;

constExpr ::= conditionalExpr;

conditionalExpr ::= logicalOrExpr:l         {: Logger.print("344 logicalOrExpr " + l); RESULT = l; :}  
    |   logicalOrExpr QUESTION expr COLON assignmentExpr {: Logger.print("345"); :}
    ;

assignmentExprOpt ::= assignmentExpr | ;

assignmentExpr ::= conditionalExpr:e                            {: Logger.print("351 conditionExpr " + e); RESULT = e; :}
    |   logicalOrExpr:u assignmentOperator:o initializeCls:e    {: Logger.print("352 logicalOrExpr: " + u + " assignOp: " + o + " initializeCls" + e); if(!e.equals("null")){SemanticAnalysis.getInstance().toAssembly(SemanticAnalysis.labels+8+": ST " + u + ", R1");SemanticAnalysis.labels= SemanticAnalysis.labels+8;}else{SemanticAnalysis.getInstance().toAssembly(SemanticAnalysis.labels+8+": ST " + u + ", " + e);SemanticAnalysis.labels= SemanticAnalysis.labels+8;}; RESULT = e; :}
    ;


assignmentOperator ::= ASSIGNMENT   {: RESULT = new Node("=", "primario");  Logger.print("=");:}
    |   MULTASSIGN                  {: RESULT = new Node("*=", "primario"); Logger.print("*=");:}
    |   DIVASSIGN                   {: RESULT = new Node("/=", "primario"); Logger.print("/=");:}
    |   MODASSIGN                   {: RESULT = new Node("%=", "primario"); Logger.print("%=");:}    
    |   PLUSASSIGN                  {: RESULT = new Node("+=", "primario"); Logger.print("+=");:}
    |   MINUSASSIGN                 {: RESULT = new Node("-=", "primario"); Logger.print("-=");:}
    |   RSHIFTASSIGN                {: RESULT = new Node(">>=","primario"); Logger.print(">>=");:}   
    |   LSHIFTASSIGN                {: RESULT = new Node("<<=","primario"); Logger.print("<<=");:}   
    |   ANDASSIGN                   {: RESULT = new Node("&=", "primario"); Logger.print("&=");:}    
    |   XORASSIGN                   {: RESULT = new Node("^=", "primario"); Logger.print("^=");:}    
    |   ORASSIGN                    {: RESULT = new Node("|=", "primario"); Logger.print("|=");:}    
    ;


initializeCls ::= assignmentExpr:ae    {: Logger.print("370 assignExpr " + ae); RESULT = ae; :}
    |   bracedInitList
    ;

bracedInitList ::= LBRK initializeList commaOpt RBRK
    |   LBRK RBRK
    ;

initializeList ::= initializeCls:i                  {: RESULT = Util.newList((Expression) i); :}
    | initializeList:iList COMMA initializeCls:i    {: ((ArrayList<Expression>) iList).add((Expression)i); RESULT = iList; :}
    ;

commaOpt ::= COMMA | ;

logicalOrExpr ::= logicalAndExpr:l              {: Logger.print("383 " + l); RESULT = l; :}
    |   logicalOrExpr:l OROP logicalAndExpr:e   {: Logger.print("384 " + l + " " + e); SemanticAnalysis.AssemblyGenerator(Operation.OR_OP, (Expression) l, (Expression) e); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.OR_OP, (Expression) l, (Expression) e); :} 
    ;

logicalAndExpr ::= inclusiveOrExpr:e                  {: Logger.print("387 " + e); RESULT = e; :}     
    |   logicalAndExpr:l DOUBLEAND inclusiveOrExpr:i  {: Logger.print("388 " + l + " " + i); SemanticAnalysis.AssemblyGenerator(Operation.AND_OP, (Expression) l, (Expression) i); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.AND_OP, (Expression) l, (Expression) i); :}
    ;

inclusiveOrExpr ::= exclusiveOrExpr:e               {: Logger.print("391 " + e); RESULT = e; :}
    |   inclusiveOrExpr:i SOROP exclusiveOrExpr:e   {: Logger.print("392 " + i + " " + e); :}
    ;

exclusiveOrExpr ::= andExpr:a               {: Logger.print("395 " + a); RESULT = a; :}
    | exclusiveOrExpr:e XOROP andExpr:a     {: Logger.print("396 " + e + " " + a); :}
    ;

andExpr ::= equalityExpr:e                  {: Logger.print("399 " + e); RESULT = e; :}
    | andExpr:a SINGLEAND equalityExpr:e    {: Logger.print("400 " + a + " " + e); :}
    ;

equalityExpr ::= relationalExpr:r               {: Logger.print("403 " + r); RESULT = r; :}
    |   equalityExpr:e EQOP relationalExpr:r    {: Logger.print("404 " + e + " " + r); SemanticAnalysis.AssemblyGenerator(Operation.EQ_OP, (Expression) e, (Expression) r); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.EQ_OP, (Expression) e, (Expression) r); :}
    |   equalityExpr:e NEQOP relationalExpr:r   {: Logger.print("405 " + e + " " + r); SemanticAnalysis.AssemblyGenerator(Operation.NE_OP, (Expression) e, (Expression) r); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.NE_OP, (Expression) e, (Expression) r); :}
    ;

relationalExpr ::= shiftExpr:s              {: Logger.print("408 " + s); RESULT = s; :}
    |   relationalExpr:r LT shiftExpr:s     {: Logger.print("409 " + r + " " + s); SemanticAnalysis.AssemblyGenerator(Operation.LESS_THAN, (Expression) r, (Expression) s); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.LESS_THAN, (Expression) r, (Expression) s); :}
    |   relationalExpr:r GT shiftExpr:s     {: Logger.print("410 " + r + " " + s); SemanticAnalysis.AssemblyGenerator(Operation.MORE_THAN, (Expression) r, (Expression) s); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.MORE_THAN, (Expression) r, (Expression) s); :}
    |   relationalExpr:r LTE shiftExpr:s    {: Logger.print("411 " + r + " " + s); SemanticAnalysis.AssemblyGenerator(Operation.LE_OP, (Expression) r, (Expression) s); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.LE_OP, (Expression) r, (Expression) s); :}
    |   relationalExpr:r GTE shiftExpr:s    {: Logger.print("412 " + r + " " + s); SemanticAnalysis.AssemblyGenerator(Operation.GE_OP, (Expression) r, (Expression) s); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.GE_OP, (Expression) r, (Expression) s); :}
    ;

shiftExpr ::= additiveExpr:a                {: Logger.print("415 " + a); RESULT = a; :}
    |   shiftExpr:s LSHIFT additiveExpr:a   {: Logger.print("416 " + s + " " + a); :}
    |   shiftExpr:s RSHIFT additiveExpr:a   {: Logger.print("417 " + s + " " + a); :}
    ;

additiveExpr ::= multExpr:m                 {: Logger.print("420 " + m); RESULT = m; :}
    |   additiveExpr:a PLUSOP multExpr:m    {: Logger.print("421 " + a + " " + m); SemanticAnalysis.AssemblyGenerator(Operation.PLUS, (Expression) a, (Expression) m); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.PLUS, (Expression) a, (Expression) m); :}
    |   additiveExpr:a MINUSOP multExpr:m   {: Logger.print("422 " + a + " " + m); SemanticAnalysis.AssemblyGenerator(Operation.MINUS, (Expression) a, (Expression) m); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.MINUS, (Expression) a, (Expression) m); :}
    ;

multExpr ::= castExpr:p                   {: Logger.print("426 " + p); RESULT = p; :}
    |   multExpr:m STAR castExpr:c        {: Logger.print("427 " + m + " " + c); SemanticAnalysis.AssemblyGenerator(Operation.MULT, (Expression) m, (Expression) c); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.MULT, (Expression) m, (Expression) c); :}  
    |   multExpr:m DIVOP castExpr:c       {: Logger.print("428 " + m + " " + c); SemanticAnalysis.AssemblyGenerator(Operation.DIV, (Expression) m, (Expression) c); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.DIV, (Expression) m, (Expression) c); :}
    |   multExpr:m MODOP castExpr:c       {: Logger.print("429 " + m + " " + c); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.PERC, (Expression) m, (Expression) c); :}
    ;

pmExpr ::= castExpr
    |   pmExpr DOTSTAR castExpr
    |   pmExpr ARROWSTAR castExpr
    ;

castExpr ::= unaryExpr:u                {: Logger.print("437 " + u); RESULT = u; :}
    |   LPAR typeId:t RPAR castExpr:c   {: Logger.print("438 " + t + " " + c); :}
    ;

unaryExpr ::= postfixExpr:p                     {: Logger.print("441 " + p); RESULT = p; :}
    |   AUTOINCRM castExpr:c                    {: Logger.print("442 " + c); RESULT = c; :}
    |   AUTODECRM castExpr:c                    {: Logger.print("443 " + c); RESULT = c; :}
    |   unaryOp:u castExpr:c                    {: Logger.print("444 " + u + " " + c); RESULT = c; :}
    |   SIZEOF unaryExpr:u                      {: Logger.print("445 " + u); RESULT = u; :}
    |   SIZEOF LPAR typeId:t RPAR               {: Logger.print("97 " + t); RESULT = t; :}
    |   SIZEOF DOTS LPAR IDENTIFIER RPAR
    |   ALIGNOF LPAR typeId RPAR
    |   newExpr
    |   deleteExpr
    ;

unaryOp ::= STAR        {: RESULT = new Node("*", "primario"); Logger.print("*");:}
    |   SINGLEAND       {: RESULT = new Node("&", "primario"); Logger.print("&"); :}
    |   PLUSOP          {: RESULT = new Node("+", "primario"); Logger.print("+");:}
    |   MINUSOP         {: RESULT = new Node("-", "primario"); Logger.print("-");:}
    |   LOGNEGATION     {: RESULT = new Node("!", "primario"); Logger.print("!");:}
    |   BINNEG          {: RESULT = new Node("~", "primario"); Logger.print("~");:}
    ;

postfixExpr ::= primaryExpr:p                            {: Logger.print("461 " + p); RESULT = p; :}
    |   postfixExpr LSQRBRK expr:e RSQRBRK               {: Logger.print("462 " + e); :}
    |   postfixExpr LSQRBRK bracedInitListOpt RSQRBRK    
    |   postfixExpr:p LPAR RPAR                          {: Logger.print("464 " + p); SemanticAnalysis.getInstance().isFunction(p); SemanticAnalysis.getInstance().checkFunctionCallException(((Function) p).getName()); RESULT = p; :}
    |   postfixExpr:p LPAR initializeList:i RPAR         {: Logger.print("465 " + p + " " + i); SemanticAnalysis.getInstance().checkFunctionCallException(((Function) p).getName(), Util.convertToTypeArray((ArrayList<Expression>) i)); :}        
    |   simpleTypeSpec LPAR exprListOpt RPAR
    |   typenameSpec LPAR exprListOpt RPAR
    |   simpleTypeSpec bracedInitList
    |   typenameSpec bracedInitList
    |   postfixExpr DOT idExpr
    |   postfixExpr ARROW idExpr
    |   postfixExpr DOT pseudoDestructorName
    |   postfixExpr AUTOINCRM
    |   postfixExpr AUTODECRM
    ;

idExpr ::= unqualifiedId:u       {: Logger.print("471 unqualifiedID " + u ); RESULT = u; :}
    |   qualifiedId
    ;

unqualifiedId ::= IDENTIFIER:i    {: Logger.print("475 identifier " + i ); RESULT = i; :}
    |   operatorFunctionId
    |   conversionFunctionId
    |   BINNEG className
    ;

operatorFunctionId ::= OPERATOR overloadableOperator;

conversionFunctionId ::= OPERATOR conversionTypeId;

conversionTypeId ::= typeSpecSeq conversionDeclaratorOpt;

/* COMMENT FOR NOW */
/*
 * conversionDeclarator ::= ptrOperator conversionDeclaratorOpt;
 * conversionDeclaratorOpt ::= conversionDeclarator | ;
*/


primaryExpr ::= literal:l           {: RESULT = l;  Logger.print("499 literal" + l); :} 
    |   THIS
    |   LPAR expr:e RPAR            {: RESULT = e;  Logger.print("501 expression" + e); :} 
    |   idExpr:i                   {: Logger.print("502 " + i); RESULT = SemanticAnalysis.getInstance().getIdentifier((String) i); :}
    ;

lambdaExpr ::= lambdaIntroducer lambdaDeclaratorOpt compoundStatement;

compoundStatement ::= LBRK RBRK
    | LBRK statementSeq:s RBRK {: RESULT = s;  Logger.print("514 statementSeq" + s); :} 
    ;

statementSeqOpt ::= statementSeq | ;

statementSeq ::= statement:s {: RESULT = s;  Logger.print("519 statement " + s);:}
    | statementSeq statement
    ;

statement ::= labeledStatement:s    {: Logger.print("ANTES 529 labeled"); RESULT = s;  Logger.print("523 labeled_statement: " + s);:}
    |   exprOpt:s                   {: Logger.print("ANTES 529 expression"); RESULT = s;  Logger.print("524 exprOpt_statement: " + s);:}
    |   compoundStatement:s         {: Logger.print("ANTES 529 compound"); RESULT = s;  Logger.print("525 compound_statement: " + s);:}
    |   selectionStatement:s        {: Logger.print("ANTES 529 selection"); RESULT = s;  Logger.print("526 selection_statement: " + s);:}
    |   iterationStatement:s        {: RESULT = s;  Logger.print("527 iteration_statement: " + s);:}
    |   jumpStatement:s             {: RESULT = s;  Logger.print("528 jump_statement: " + s);:}
    |   blockDeclaration:s          {: Logger.print("ANTES 529 blockDeclaration_statement");  RESULT = s;  Logger.print("529 blockDeclaration_statement: " + s);:}
    |   tryBlock:s                  {: RESULT = s;  Logger.print("530 tryBlock_statement: " + s);:}
    ;


labeledStatement ::= IDENTIFIER COLON statement
    |   CASE constExpr COLON statement
    |   DEFAULT COLON statement
    ;

/*
*exprOpt ::= expr | ;
*/

exprOpt ::= SEMICOLON
    | expr SEMICOLON
    ;

/*
selectionStatement ::= IF LPAR condition:c RPAR {: Logger.print("551 if condition "); SemanticAnalysis.getInstance().createIf((Expression) c); :}  statement:s {: SemanticAnalysis.getInstance().exitCurrentScope(); :} 
    |   IF LPAR condition:c RPAR statement:s ELSE statement
    |   SWITCH LPAR condition RPAR statement
    ;
*/

/*
selectionStatement ::= IF LPAR condition:c RPAR {: Logger.print("551 if condition "); SemanticAnalysis.getInstance().createIf((Expression) c); :}  statement:s {: SemanticAnalysis.getInstance().exitCurrentScope(); :}
    ;
*/

selectionStatement ::= IF LPAR condition:c RPAR {: Logger.print("551 if condition "); SemanticAnalysis.getInstance().createIf((Expression) c); :}  statement:s {: SemanticAnalysis.getInstance().exitCurrentScope(); :}  ruleAux;

ruleAux ::=  {: Logger.print("568 else condition "); SemanticAnalysis.getInstance().createElse(); :} ELSE statement:s {: SemanticAnalysis.getInstance().exitCurrentScope(); :} | ;

condition ::= expr:e            {: Logger.print("condition->expression " + e); RESULT = e; :}
    |   declSpecSeq declarator ASSIGNMENT initializeCls
    |   declSpecSeq declarator bracedInitList
    ;

conditionOpt ::= condition | ;

iterationStatement ::= WHILE LPAR condition RPAR statement
    |   DO statement WHILE LPAR expr RPAR SEMICOLON 
    |   FOR LPAR forInitStatement conditionOpt SEMICOLON exprOpt RPAR statement
    |   FOR LPAR forRangeDeclaration COLON forRangeInitializer RPAR statement   
    ;

forRangeDeclaration ::= typeSpecSeq declarator;

forRangeInitializer ::= expr bracedInitList;

forInitStatement ::=  exprOpt 
    | simpleDecl 
    ;

jumpStatement ::= BREAK SEMICOLON               {: Logger.print("566 BREAK ;"); :}
    |   CONTINUE SEMICOLON                      {: Logger.print("567 CONTINUE ;"); :}               
    |   RETURN SEMICOLON                        {: Logger.print("568 BREAK ;"); :}
    |   RETURN expr:e SEMICOLON                 {: Logger.print("****"); SemanticAnalysis.getInstance().checkReturnedType(e); SemanticAnalysis.getInstance().toAssembly(SemanticAnalysis.labels+8+": BR *0(SP)"); SemanticAnalysis.labels = SemanticAnalysis.labels +8; Logger.print("448 RETURN expr ; " + e); RESULT = e; :}
    |   GOTO IDENTIFIER SEMICOLON
    ;

/**
 * Literals
 */

literal ::= integerLiteral:i    {: Logger.print("575 " + i); RESULT = i; :} 
    |   characterLiteral:c      {: Logger.print("576 " + c); RESULT = c; :} 
    |   floatingLiteral
    |   stringLiteral:s         {: Logger.print("578 " + s); RESULT = s; :} 
    |   booleanLiteral:b        {: Logger.print("579 " + b); RESULT = b; :} 
    |   pointerLiteral
    |   userDefinedLiteral
    ;

integerLiteral ::= INTEGER:i        {: Logger.print("584 " + i); RESULT = new Expression(new Type("int"), i.toString()); :} ;

booleanLiteral ::= TRUE:t           {: Logger.print("686 " + t); RESULT = new Expression(new Type("bool"), t.toString()); :} 
    | FALSE:f                       {: Logger.print("687 " + f); RESULT = new Expression(new Type("bool"), f.toString()); :}
    ;

pointerLiteral ::= NULLPTR;

stringLiteral ::= STRING_LITERAL:s {: Logger.print("628 " + s); RESULT = new Expression(new Type("string"), s.toString()); :} ;

bracedInitListOpt ::= bracedInitList | ;

exprListOpt ::= initializeList | ;

typeIdListOpt ::= typeIdList | ;

typeIdList ::= typeId dotsOpt
    |   typeIdList COMMA typeId dotsOpt
    ;

refQualifierOpt ::= refQualifier | ;

refQualifier ::= SINGLEAND | DOUBLEAND;

cvQualifierSeq ::=  cvQualifier
    |   cvQualifier cvQualifierSeq
    ;

cvQualifier ::= CONST | VOLATILE;

trailingReturnType ::= ARROW trailingTypeSpecSeq abstractDeclaratorOpt;

trailingTypeSpecSeq ::= trailingTypeSpec attributeSpecSeqOpt
    |   trailingTypeSpec trailingTypeSpecSeq
    ;

/* noPtrAbstractDeclarator NOT IMPLEMENTED */
ptrAbstractDeclarator ::= noPtrAbstractDeclarator
    |   ptrOperator ptrAbstractDeclaratorOpt
    ;

ptrAbstractDeclaratorOpt ::= ptrAbstractDeclarator | ;

ptrOperator ::= STAR attributeSpecSeqOpt cvQualifierSeqOpt
    |   SINGLEAND attributeSpecSeqOpt
    |   DOUBLEAND attributeSpecSeqOpt
    |   SEPPTR nestedNameSpec SINGLEAND attributeSpecSeqOpt cvQualifierSeqOpt
    |   nestedNameSpec SINGLEAND attributeSpecSeqOpt cvQualifierSeqOpt
    ;

typeSpecSeq ::= typeSpec typeSpecSeq2;

typeSpecSeq2 ::= typeSpecSeq
    |
    ;

typeSpec ::= trailingTypeSpec
    |   classSpec
    |   enumSpec
    ;

/* enumHead NOT IMPLEMENTED
 * enumList enumListOpt NOT IMPLEMENTED
 */
enumSpec ::= enumHead LBRK enumListOpt RBRK
    |   enumHead LBRK enumList COMMA RBRK
    ;

/* simpleTypeSpec NOT IMPLEMENTED
 * elaboratedTypeSpec NOT IMPLEMENTED
 * typenameSpec NOT IMPLEMENTED
 */
trailingTypeSpec ::= simpleTypeSpec
    |   elaboratedTypeSpec
    |   typenameSpec
    |   cvQualifier
    ;

classSpec ::= classHead LBRK memberSpecificationOpt RBRK;

/* memberSpecification NOT IMPLEMENTED */
memberSpecificationOpt ::= memberSpecification | ;

/* classHeadName NOT IMPLEMENTED */
classHead ::= classKey attributeSpecSeqOpt classHead2;
classHead2 ::= classHeadName classVirtSpecSeqOpt;

classKey ::= CLASS | STRUCT | UNION;

classVirtSpecSeqOpt ::= classVirtSpecSeq | ;

classVirtSpecSeq ::= classVirtSpec
    |   classVirtSpecSeq classVirtSpec
    ;

classVirtSpec ::= FINAL | EXPLICIT;

accessSpecOpt ::= accessSpec | ;

accessSpec ::= PUBLIC
    |   PROTECTED
    |   PRIVATE
    ;

classOrDeclType ::= COLON COLON nestedNameSpec className
    |   nestedNameSpec className
    |   COLON COLON className
    |   className
    |   declTypeSpec
    ;

className ::= IDENTIFIER;


declTypeSpec ::= DECLTYPE LPAR expr RPAR;

attributeSpecSeqOpt ::= attributeSpecSeq | ;

attributeSpecSeq ::= attributeSpec
    |   attributeSpecSeq attributeSpec
    ;

attributeSpec ::= LSQRBRK LSQRBRK attributeList RSQRBRK RSQRBRK
    |   alignmentSpec 
    ;

attributeList ::= attribute DOTS
    |   attributeList COMMA attribute DOTS
    |   attributeOpt
    |   attributeList COMMA attributeOpt
    ;

attributeOpt ::= attribute | ;

attribute ::= attributeToken attributeArgClsOpt;

attributeArgClsOpt ::= attributeArgCls | ;

attributeToken ::= IDENTIFIER
    |   attributeScopedToken
    ;

attributeScopedToken ::= IDENTIFIER COLON COLON IDENTIFIER;

attributeArgCls ::= LPAR balancedTokenSeq RPAR;

balancedTokenSeq ::= balancedToken
    |   balancedTokenSeq balancedToken
    ;

/* token NOT IMPLEMENTED */
balancedToken ::= LPAR balancedTokenSeq RPAR
    |   LSQRBRK balancedTokenSeq RSQRBRK
    |   LBRK balancedTokenSeq RBRK
    |   token
    ;

/* ISSUE #2 - rule "alignment-expression" not defined in the grammar ref */
alignmentSpec ::= ALIGNAS LPAR typeId dotsOpt RPAR;

/**
 * Empty Declaration
 */
emptyDeclaration ::= SEMICOLON;

dotsOpt ::= DOTS | ;

overloadableOperator ::= NEW;